import 'dart:async';

import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';


class TemplateBloc extends Bloc<TemplateEvent, TemplateState> {
  TemplateBloc() : super(TemplateInitial());
}

// Events
abstract class TemplateEvent extends Equatable {
  const TemplateEvent();
}


class LoadTemplateEvent extends Equatable {
  final args;
  LoadTemplateEvent(this.args);

  @override
  List<Object> get props => [args];
}

class LoadingTemplateEvent extends Equatable {
  LoadingTemplateEvent();

  @override
  List<Object> get props => [];
}

class TemplateLoadedEvent extends Equatable {
  final response;

  TemplateLoadedEvent(this.response);

  @override
  List<Object> get props => [response];
}

class TemplateErrorEvent extends Equatable {
  final errors;
  TemplateErrorEvent(this.errors);

  @override
  List<Object> get props => [errors];
}

class TemplateExceptionEvent extends Equatable {
  final exception;
  TemplateExceptionEvent(this.exception);

  @override
  List<Object> get props => [exception];
}
// States
abstract class TemplateState extends Equatable {
  const TemplateState();
}

class TemplateInitial extends TemplateState {
  @override
  List<Object> get props => [];
}


class TemplateLoadingState extends TemplateState {
  @override
  List<Object> get props => [];
}


class TemplateLoadedState extends TemplateState {
  final response;

  TemplateLoadedState(this.response);

  @override
  List<Object> get props => [response];
}


class TemplateErrorState extends TemplateState {
  final errors;

  TemplateErrorState(this.errors);

  @override
  List<Object> get props => [this.errors];
}


class TemplateExceptionState extends TemplateState {
  final exception;

  TemplateExceptionState(this.exception);

  @override
  List<Object> get props => [this.exception];
}
